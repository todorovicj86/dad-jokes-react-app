{"version":3,"sources":["LeftHeader.js","Joke.js","DadJokes.js","App.js","serviceWorker.js","index.js"],"names":["LeftHeader","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addNewJokes","bind","assertThisInitialized","react_default","a","createElement","className","src","alt","onClick","Component","Joke","state","score","voteUp","id","style","borderColor","changeBorderColor","voteDown","joke","changeEmoji","DadJokes","jokesData","JSON","parse","window","localStorage","getItem","isLoading","seenJoke","Set","map","el","console","log","length","getJokes","newJokes","numJokes","axios","get","headers","Accept","jokes","newJoke","data","has","push","add","setState","st","concat","toConsumableArray","setItem","stringify","alert","_context","t0","numb","_this2","objectSpread","_this3","sortJokes","sort","b","src_LeftHeader_0","src_Joke_0","key","handleVote","defaultProps","App","src_DadJokes_0","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5382e071.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './LeftHeader.css'\r\n\r\n\r\nclass LeftHeader extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.addNewJokes = this.addNewJokes.bind(this)\r\n    }\r\n\r\n    addNewJokes(){\r\n        this.props.addNewJokes();\r\n    }\r\n    render(){\r\n        return(\r\n            <div className = \"LeftHeader\">\r\n            <h1 className=\"LeftHeader-title\"><span>Dad</span> Jokes</h1>\r\n            {/* Emoji */}\r\n                <div className=\"LeftHeader-emoji\">\r\n                <img  src='https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg' alt=\"Smiling Emoji\"/>\r\n                   {/* <span role=\"img\" aria-label= \"Smiling Emoji\">ðŸ˜‚</span>  */}\r\n                </div>\r\n            <button className=\"LeftHeader-btn\"\r\n                onClick = {this.addNewJokes}\r\n            >\r\n                New Jokes\r\n            </button>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LeftHeader;","import React, { Component } from 'react'\r\nimport './Joke.css'\r\n\r\n\r\nclass Joke extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            score: 0,\r\n        }\r\n    }\r\n\r\n    changeEmoji(){\r\n        const {score} = this.props;\r\n        if (score >= 15) {\r\n            return \"em em-rolling_on_the_floor_laughing\";\r\n        } else if (score >= 12) {\r\n            return \"em em-laughing\";\r\n        } else if (score >= 9) {\r\n            return \"em em-smiley\";\r\n        } else if (score >= 6) {\r\n            return \"em em-slightly_smiling_face\";\r\n        } else if (score >= 3) {\r\n            return \"em em-neutral_face\";\r\n        } else if (score >= 0) {\r\n            return \"em em-confused\";\r\n        } else {\r\n            return \"em em-angry\";\r\n        }\r\n\r\n    }\r\n\r\n    changeBorderColor() {\r\n        const {score} = this.props;\r\n        if (score >= 15) {\r\n          return \"#4CAF50\";\r\n        } else if (score >= 12) {\r\n          return \"#8BC34A\";\r\n        } else if (score >= 9) {\r\n          return \"#CDDC39\";\r\n        } else if (score >= 6) {\r\n          return \"#FFEB3B\";\r\n        } else if (score >= 3) {\r\n          return \"#FFC107\";\r\n        } else if (score >= 0) {\r\n          return \"#FF9800\";\r\n        } else {\r\n          return \"#f44336\";\r\n        }\r\n      }\r\n\r\n\r\n    render(){\r\n        return(\r\n\r\n            <li className=\"Joke\">\r\n                {/* div with up - and down - vote and score */}\r\n                <div className=\"Joke-vote-score\">\r\n                    <i className=\"fas fa-arrow-up\" onClick = {this.props.voteUp} id={this.props.id}></i>\r\n                    <div className=\"Joke-score\" style={{borderColor: this.changeBorderColor()}}>{this.props.score}</div>\r\n                    <i className=\"fas fa-arrow-down\" onClick = {this.props.voteDown} id={this.props.id}></i>\r\n                </div>\r\n                \r\n\r\n                {/* Joke */}\r\n                <div className=\"Joke-joke\">{this.props.joke}</div>\r\n\r\n                {/* emoji */}\r\n                <span className=\"Joke-emoji\">   \r\n                    <i className= {this.changeEmoji()}></i>\r\n                </span>\r\n                    \r\n            </li>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Joke;","import React, { Component } from 'react'\r\nimport LeftHeader from './LeftHeader';\r\nimport Joke from './Joke'\r\nimport axios from 'axios'\r\nimport './DadJokes.css'\r\n\r\n\r\nclass DadJokes extends Component {\r\n    static defaultProps = {\r\n        numJokes: 10,\r\n    }\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            jokesData: JSON.parse(window.localStorage.getItem(\"jokes\") || \"[]\"),\r\n            isLoading: false,\r\n        }\r\n        this.seenJoke = new Set(this.state.jokesData.map(el => el.joke))\r\n        console.log(this.seenJoke);\r\n        this.addNewJokes = this.addNewJokes.bind(this);\r\n    }\r\n    \r\n    // when load, render 10 jokes\r\n    componentDidMount() {\r\n        if(this.state.jokesData.length === 0) {\r\n            this.getJokes()\r\n        }\r\n\r\n    }\r\n\r\n    async getJokes(){\r\n        try {\r\n            // make an array of new jokes on load\r\n            let newJokes = [];\r\n            while (newJokes.length < this.props.numJokes){\r\n                let jokes = await axios.get(\"https://icanhazdadjoke.com/\", {headers: {Accept: \"application/json\"}});\r\n                let newJoke = jokes.data\r\n                if(!this.seenJoke.has(newJoke.joke)){\r\n                    // add score to each joke, set to zero at the beginning\r\n                    newJoke.score = 0;\r\n                    newJokes.push(newJoke)\r\n                    this.seenJoke.add(newJoke.joke)\r\n                } else {\r\n                    console.log(\"Duplicate has an id \" + newJoke.joke);\r\n                }\r\n            \r\n            }\r\n            this.setState(st => (\r\n                {\r\n                jokesData: [...st.jokesData, ...newJokes],\r\n                isLoading: false,\r\n            })); \r\n            window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokesData))\r\n        }catch(err){\r\n            alert(err);\r\n            this.setState({\r\n                isLoading: false,\r\n            })\r\n        }\r\n    }\r\n    \r\n    // scores\r\n    handleVote(id, numb){\r\n        this.setState(st => ({\r\n            jokesData: st.jokesData.map(joke => {\r\n                return joke.id === id ? {...joke, score: joke.score + numb} : {...joke}\r\n            })\r\n        }), \r\n        () => window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokesData)))\r\n    }\r\n\r\n\r\n    // add new jokes when button is clicked\r\n    addNewJokes(){\r\n        this.setState({\r\n            // jokesData: [...this.state.jokesData],\r\n            isLoading: true,\r\n        }, this.getJokes)\r\n    }\r\n\r\n   \r\n    render(){\r\n        // sort state/jokes by score and then render sorted jokes\r\n        let sortJokes = this.state.jokesData.sort(       \r\n            function(a,b){\r\n                return b.score - a.score\r\n            }\r\n        )\r\n                \r\n        return(\r\n            <div className = \"DadJokes\">\r\n            {/* render left Header with button, pass click function as props */}\r\n                <LeftHeader \r\n                    addNewJokes = {this.addNewJokes}\r\n                />\r\n                <div className=\"DadJokes-container\">\r\n                {this.state.isLoading ? \r\n                    /* loader */\r\n                    <div className=\"DadJokes-load\">\r\n                        <p>Loading...</p>\r\n                        <i className='far fa-8x fa-laugh fa-spin' />\r\n                        {/* <div className=\"lds-roller\"><div> </div> <div></div> <div></div> <div></div> <div></div> <div></div> <div></div> <div></div> </div> */}\r\n                    </div>\r\n                    :\r\n                    <ul>\r\n                    {/* render Joke 10 times at the load */}\r\n                        {\r\n                            sortJokes.map(joke=>\r\n                            \r\n                                <Joke  \r\n                                    key={joke.id} \r\n                                    joke={joke.joke}\r\n                                    id={joke.id}\r\n                                    voteUp = {() => this.handleVote(joke.id, 1)}\r\n                                    voteDown = {() => this.handleVote(joke.id, -1)}\r\n                                    score = {joke.score}\r\n                                />\r\n                            \r\n                            )\r\n                        }\r\n                    </ul>\r\n                }\r\n                </div>              \r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DadJokes;","import React, {Component} from 'react';\nimport './App.css';\nimport DadJokes from './DadJokes'\n\n\n\nclass App extends Component {\n  render(){\n    return(\n      <div className=\"App\">\n          <DadJokes />\n      </div>\n    )\n  }\n\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"@fortawesome/fontawesome-free/css/all.css\"\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}